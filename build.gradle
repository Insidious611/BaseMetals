def corePlugin = "com.mcmoddev.lib.asm.ASMPlugin"

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public"
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT"
        classpath "org.spongepowered:mixingradle:0.4-SNAPSHOT"
        classpath "com.matthewprenger:CurseGradle:1.0-SNAPSHOT"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'org.spongepowered.mixin'
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: "maven-publish"
apply plugin: "org.sonarqube"

javadoc {
    failOnError = false
}

def mod_file = getModFile()
def mc_version = "1.10.2"
def short_version = getVersion("VERSION", mod_file)
version = mc_version + "-" + short_version
if (System.getenv().BUILD_NUMBER) {
    version += "." + System.getenv().BUILD_NUMBER
}
group = "com.mcmoddev"
archivesBaseName = "BaseMetals"
sourceCompatibility = targetCompatibility = "1.8"

class Secrets {
    def data = null

    def getProperty(String key) {
        return data ? data[key] : ""
    }
}

import groovy.json.JsonSlurper

def secretFile
if (System.getenv().SECRET_FILE) {
    secretFile = file System.getenv().SECRET_FILE
} else {
    secretFile = file "secret.json"
}

project.ext.secret = new Secrets()
if (secretFile.exists()) {
    secretFile.withReader {
        project.ext.secret.data = new JsonSlurper().parse it
    }
}

minecraft {
    version = "1.10.2-12.18.3.2185"
    runDir = "run"
    mappings = "stable_29"
//  coreMod = corePlugin
    clientJvmArgs = ["-Dfml.coreMods.load=$corePlugin"]
    serverJvmArgs = ["-Dfml.coreMods.load=$corePlugin"]
}

repositories {
    maven {
	    name "SpongePowered"
        url 'https://repo.spongepowered.org/maven/'
    }
    maven { // Mantle, TCon, JEI
        name "DVS1 Maven FS"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven { // CCL, CCC, NEI
        name "Chickenbones Repo"
        url "http://chickenbones.net/maven/"
    }
    maven { // The One Probe
        name "tterrag"
        url "http://maven.tterrag.com/"
    }
    maven {
        name "MMD"
        url "https://maven.mcmoddev.com/"
    }
    maven { // MCMultipart
        name "amadornes"
        url "http://maven.amadornes.com/"
    }
    maven { // Tesla
        name "epoxide"
        url "http://maven.epoxide.org"
    }
    maven { // CraftTweaker, ZenScript
        name 'jared maven'
        url "http://blamejared.com/maven"
    }
    maven { // IC2
        name "industrialcraft"
        url "http://maven.ic2.player.to"
    }
    maven { // WAILA/HWYLA
    	name "tehnut"
    	url "http://tehnut.info/maven"
    }
    maven { // CoFH
    	name "Covers Maven"
    	url "http://maven.covers1624.net"
    }
	maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven { // Mekanism, TAIGA
        name "jitpack"
        url "https://jitpack.io"
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    shade 'org.spongepowered:mixin:0.6.8-SNAPSHOT'

    compileOnly ("com.github.aidancbrady:Mekanism:${mekanism_version}") {
        exclude group: 'MCMultiPart'
        exclude group: 'mezz.jei'
    }

    deobfCompile ("com.github.TeamFRM:TAIGA:${taiga_version}") {
        exclude group: 'MCMultiPart'
        exclude group: 'mezz.jei'
        exclude group: 'slimeknights.mantle'
        exclude group: 'slimeknights'
    }

    deobfCompile ("slimeknights:TConstruct:${mc_version}-${tconstruct_version}") {
        exclude group: 'mezz.jei'
    }
    deobfCompile ("slimeknights.mantle:Mantle:${mc_version}-${mantle_version}") {
        exclude group: 'mezz.jei'
    }
	
//  We do this to make NEI happy as there is no deobf or dev JEI jar for the deobf instance
    deobfCompile "mezz.jei:jei_${mc_version}:${jei_version}"
//  deobfCompile "mezz.jei:jei_${mc_version}:${jei_version}:api"
//  runtime "mezz.jei:jei_${mc_version}:${jei_version}:dev"

    deobfCompile "codechicken:CodeChickenLib:${mc_version}-${ccl_version}:universal"
    deobfCompile ("codechicken:CodeChickenCore:${mc_version}-${ccc_version}:universal") {
        exclude group: 'codechicken'
    }
    deobfCompile ("codechicken:NotEnoughItems:${mc_version}-${nei_version}:universal") {
        exclude group: 'mezz.jei'
        exclude group: 'codechicken'
    }
    deobfCompile "com.mcmoddev:OreSpawn:${mc_version}-${orespawn_version}"
//  deobfCompile "MCMultiPart:MCMultiPart:${mcmp_version}:universal"
    deobfCompile "MCMultiPart2:MCMultiPart-exp:${mcmp_experimental_version}"
//  compile "mcjty:theoneprobe:TheOneProbe:${mc_version}-${top_version}"

    deobfCompile ("net.industrial-craft:industrialcraft-2:${ic2_version}:api") {
        exclude group: 'mezz.jei'
    }
    deobfCompile ("MineTweaker3:MineTweaker3-API:${minetweaker_version}") {
        exclude group: 'mezz.jei'
    }
    deobfCompile ("mcp.mobius.waila:Hwyla:${hwyla_version}") {
        exclude group: 'mezz.jei'
    }
    
    // CoFHCore for TE integration
    compile ("cofh:CoFHCore:${mc_version}-${cofhcore_version}:deobf") {
    	exclude group: 'mezz.jei'
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from (sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": short_version, "mcversion": project.minecraft.version
    }

    from (sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
    manifest {
        attributes "FMLCorePluginContainsFMLMod": "true"
        attributes "FMLCorePlugin": corePlugin
//        attributes "FMLAT" : "mmdlib_at.cfg"
    }
}

/*
task apiJar(type: Jar) {
    from apiClasses
    classifier = 'apiClasses'
}
*/

task deobfJar(type: Jar) {
    classifier = "deobf"
    from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.getDestinationDir()
}

artifacts {
//  archives apiJar
    archives deobfJar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
/*
            artifact apiJar {
                classifier "api"
            }
*/
            artifact deobfJar {
                classifier "deobf"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
    repositories {
        maven {
            credentials {
                username secret.username
                password secret.password
            }
            url secret.url
        }
    }
}

curseforge {
    apiKey = secret.curseforgeAPIKey
    project {
        id = "240967"
        changelog = file("CHANGELOG.txt")
        releaseType = "release"
        addGameVersion(project.mc_version)
        def projectName = "Base Metals"
        def displayVersion = getVersion("VERSION", mod_file)
        if (System.getenv().BUILD_NUMBER) {
            displayVersion += "." + System.getenv().BUILD_NUMBER
        }
        mainArtifact(jar) {
            displayName = "$projectName $displayVersion"
            relations {
                requiredLibrary "mmd-orespawn"
                optionalLibrary "additional-loot-tables"
            }
        }
//        addArtifact(apiJar) {
//            displayName = "$projectName $displayVersion API"
//        }
        addArtifact(sourceJar) {
            displayName = "$projectName $displayVersion Sources"
        }
        addArtifact(deobfJar) {
            displayName = "$projectName $displayVersion Development"
        }
        addArtifact(javadocJar) {
            displayName = "$projectName $displayVersion Javadoc"
        }
    }
}

String getModFile() {
    String path = ""
    FileTree tree = fileTree(dir: "src/main/java")
    tree.include "**/*.java"
    tree.visit { element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim()
                if (s.startsWith("@Mod(")) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path
}

String getVersion(String type, String mod_file) {
    String major = "0"
    String revision = "0"
    String patch = "0"
    String prefix = "public static final String $type = \""
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2)
            String[] pts = s.split("\\.")

            major = pts[0]
            revision = pts[1]
            patch = pts[2]
        }
    }
    return "$major.$revision.$patch"
}
